{"version":3,"file":"commonHelpers.js","sources":["../src/js/render-functions.js","../src/js/pixabay-api.js","../src/main.js"],"sourcesContent":["\n// import iziToast from \"izitoast\";\n// import SimpleLightbox from \"simplelightbox/dist/simple-lightbox.esm\";\n\n\n// export function renderGallery(images) {\n//     const galleryElement = document.getElementById('gallery');\n//     galleryElement.innerHTML = '';\n\n//     images.forEach(image => {\n//         const imageElement = document.createElement('img');\n//         imageElement.src = image.webformatURL;\n//         imageElement.alt = image.tags;\n//         galleryElement.appendChild(imageElement);\n//     });\n\n//     // Чекаємо, коли весь контент буде завантажено\n//     window.addEventListener('load', () => {\n//         // Ініціалізуємо SimpleLightbox\n//         const lightbox = new SimpleLightbox('#gallery a', {\n//             captionsData: 'alt',\n//             captionsDelay: 250,\n//         });\n        \n//     });\n\n// }\n\n\n// export function showErrorMessage(message) {\n//     iziToast.error({\n//         title: 'Error',\n//         message: message,\n//         position: 'topRight'\n//     });\n// }\n\n\n// export const createGalleryItemMarkup = images => {\n//     return images\n//         .map(({ preview, largeImageURL, description, likes, downloads, comments, views }) =>\n//             `\n// <li class=\"gallery-item\">\n//   <a class=\"gallery-link\" href=\"${largeImageURL}\">\n//     <img class=\"gallery-image\" src=\"${preview}\" alt=\"${description}\" />\n//     </a>\n//     <p class=\"image-info\">Likes: ${likes}</p>\n//     <p class=\"image-info\">Downloads: ${downloads}</p>\n//     <p class=\"image-info\">Comments: ${comments}</p>\n//     <p class=\"image-info\">Views: ${views}</p>\n  \n// </li>\n// `\n//         ).join(\"\");\n// }\n\n\n\n\nexport const createMarkup = images => {\n  return images.reduce(\n    (\n      html,\n      { tags, webformatURL, largeImageURL, likes, views, comments, downloads }\n    ) => {\n      return (\n        html +\n        `<li class=\"photo-container\">\n    <a href=${largeImageURL} class=\"card-link js-card-link\">\n        <img class=\"photo\" src=\"${webformatURL}\" alt=\"${tags}\" >\n    </a>\n    <div class=\"info\">\n        <div class=\"info-item\">\n            <span class=\"title\">Likes</span>\n            <span class=\"info\">${likes}</span>\n        </div>\n        <div class=\"info-item\">\n            <span class=\"title\">Views</span>\n            <span class=\"info\">${views}</span>\n        </div>\n        <div class=\"info-item\">\n            <span class=\"title\">Comments</span>\n            <span class=\"info\">${comments}</span>\n        </div>\n        <div class=\"info-item\">\n            <span class=\"title\">Downloads</span>\n            <span class=\"info\">${downloads}</span>\n        </div>\n    </div>\n</li>\n    `\n      );\n    },\n    ''\n  );\n};\n\n\n\n\n\n\n","// const API_KEY = '36831131-bfb1c5890fc73f15a7de29d05';\n\n// export async function fetchImages(query) {\n//     const url = `https://pixabay.com/api/?key=${API_KEY}&q=${query}&image_type=photo&orientation=horizontal&safesearch=true`;\n//     const response = await fetch(url);\n\n//     if (!response.ok) {\n//         throw new Error('Failed to fetch images');\n//     }\n\n//     const data = await response.json();\n//     return data.hits;\n// }\n\n\n\n\nconst API_KEY = '36831131-bfb1c5890fc73f15a7de29d05';\nconst BASE_URL = 'https://pixabay.com/api/';\n\n\nexport const fetchPhotos = (searchImage) => {\n  const params = new URLSearchParams({\n    key: API_KEY,\n    q: searchImage,\n    image_type: 'photo',\n    orientation: 'horizontal',\n    safesearch: 'true',\n  });\n\n  return fetch(`${BASE_URL}/?${params}`).then(response => {\n    if (!response.ok) {\n      throw new Error(\n        'Sorry, there are no images matching your search query. Please try again!'\n      );\n    }\n    return response.json();\n  });\n};","// import { fetchImages } from './js/pixabay-api.js';\n// import { renderGallery, showErrorMessage, createGalleryItemMarkup } from './js/render-functions.js';\n\n\n\n// const searchForm = document.getElementById('search-form');\n// const searchInput = document.getElementById('search-input');\n\n\n\n\n\n\n\n// searchForm.addEventListener('submit', async (event) => {\n//     event.preventDefault();\n\n//     const searchTerm = searchInput.value.trim();\n//     if (!searchTerm) {\n//         showErrorMessage('Sorry, there are no images matching your search query. Please try again!');\n//         return;\n//     }\n\n//     try {\n//         const images = await fetchImages(searchTerm);\n//         console.log(images)\n//         renderGallery(images);\n//     } catch (error) {\n//         showErrorMessage('Failed to fetch images. Please try again.');\n//     }\n// });\n\n\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport { createMarkup } from './js/render-functions';\nimport { fetchPhotos } from './js/pixabay-api';\n\nconst imgContainer = document.querySelector('.gallery');\nconst searchForm = document.querySelector('.search-form');\nconst loaderEl = document.querySelector('.loader');\n\nfunction onSearch(event) {\n  event.preventDefault();\n  const searchQuery = event.target.elements.searchKeyword.value.trim();\n  imgContainer.innerHTML = '';\n  if (searchQuery === '') {\n    return iziToast.error({\n      message:\n        'Sorry, there are no images matching your search query. Please try again!',\n    });\n  }\n  imgContainer.innerHTML = '';\n  loaderEl.classList.remove('is-hidden');\n\n  fetchPhotos(searchQuery)\n    .then(imagesData => {\n      if (imagesData.hits.length === 0) {\n        iziToast.error({\n          message:\n            'Sorry, there are no images matching your search query. Please try again!',\n        });\n      }\n\n      imgContainer.innerHTML = createMarkup(imagesData.hits);\n      const lightbox = new SimpleLightbox('.gallery a', {\n        captionsData: 'alt',\n        captionsDelay: 250,\n      });\n    /*   lightbox.refresh(); */\n    })\n    .catch(error => console.log(error))\n    .finally(() => {\n      event.target.reset();\n      loaderEl.classList.add('is-hidden');\n    });\n}\n\nsearchForm.addEventListener('submit', onSearch);"],"names":["createMarkup","images","html","tags","webformatURL","largeImageURL","likes","views","comments","downloads","API_KEY","BASE_URL","fetchPhotos","searchImage","params","response","imgContainer","searchForm","loaderEl","onSearch","event","searchQuery","iziToast","imagesData","SimpleLightbox","error"],"mappings":"6vBA2DO,MAAMA,EAAeC,GACnBA,EAAO,OACZ,CACEC,EACA,CAAE,KAAAC,EAAM,aAAAC,EAAc,cAAAC,EAAe,MAAAC,EAAO,MAAAC,EAAO,SAAAC,EAAU,UAAAC,CAAW,IAGtEP,EACA;AAAA,cACMG,CAAa;AAAA,kCACOD,CAAY,UAAUD,CAAI;AAAA;AAAA;AAAA;AAAA;AAAA,iCAK3BG,CAAK;AAAA;AAAA;AAAA;AAAA,iCAILC,CAAK;AAAA;AAAA;AAAA;AAAA,iCAILC,CAAQ;AAAA;AAAA;AAAA;AAAA,iCAIRC,CAAS;AAAA;AAAA;AAAA;AAAA,MAOtC,EACJ,EC7EMC,EAAU,qCACVC,EAAW,2BAGJC,EAAeC,GAAgB,CAC1C,MAAMC,EAAS,IAAI,gBAAgB,CACjC,IAAKJ,EACL,EAAGG,EACH,WAAY,QACZ,YAAa,aACb,WAAY,MAChB,CAAG,EAED,OAAO,MAAM,GAAGF,CAAQ,KAAKG,CAAM,EAAE,EAAE,KAAKC,GAAY,CACtD,GAAI,CAACA,EAAS,GACZ,MAAM,IAAI,MACR,0EACR,EAEI,OAAOA,EAAS,MACpB,CAAG,CACH,ECEMC,EAAe,SAAS,cAAc,UAAU,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAW,SAAS,cAAc,SAAS,EAEjD,SAASC,EAASC,EAAO,CACvBA,EAAM,eAAc,EACpB,MAAMC,EAAcD,EAAM,OAAO,SAAS,cAAc,MAAM,OAE9D,GADAJ,EAAa,UAAY,GACrBK,IAAgB,GAClB,OAAOC,EAAS,MAAM,CACpB,QACE,0EACR,CAAK,EAEHN,EAAa,UAAY,GACzBE,EAAS,UAAU,OAAO,WAAW,EAErCN,EAAYS,CAAW,EACpB,KAAKE,GAAc,CACdA,EAAW,KAAK,SAAW,GAC7BD,EAAS,MAAM,CACb,QACE,0EACZ,CAAS,EAGHN,EAAa,UAAYhB,EAAauB,EAAW,IAAI,EACpC,IAAIC,EAAe,aAAc,CAChD,aAAc,MACd,cAAe,GACvB,CAAO,CAEP,CAAK,EACA,MAAMC,GAAS,QAAQ,IAAIA,CAAK,CAAC,EACjC,QAAQ,IAAM,CACbL,EAAM,OAAO,QACbF,EAAS,UAAU,IAAI,WAAW,CACxC,CAAK,CACL,CAEAD,EAAW,iBAAiB,SAAUE,CAAQ"}